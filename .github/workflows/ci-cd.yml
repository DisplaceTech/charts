name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'containers/**'
      - 'wordpress/**'
      - '.github/workflows/**'
      - 'Makefile'
  pull_request:
    branches: [ main ]
    paths:
      - 'containers/**'
      - 'wordpress/**'
      - '.github/workflows/**'
      - 'Makefile'
  release:
    types: [ published ]

env:
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: wordpress
  WORDPRESS_VERSION: 6.8.1
  PHP_VERSION: 8.4.10
  HELM_CHART_PATH: wordpress
  HELM_RELEASE_NAME: wordpress
  HELM_NAMESPACE: wordpress

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and test Docker image
        run: |
          # Build image
          docker build -t ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ env.WORDPRESS_VERSION }}-${{ env.PHP_VERSION }} containers/
          
          # Test image
          docker run --rm -d -p 8080:80 --name wordpress-test ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ env.WORDPRESS_VERSION }}-${{ env.PHP_VERSION }}
          sleep 30
          curl -f http://localhost:8080 || exit 1
          docker stop wordpress-test

      - name: Test Helm chart
        run: |
          # Install Helm
          curl https://get.helm.sh/helm-v3.12.0-linux-amd64.tar.gz | tar xz
          sudo mv linux-amd64/helm /usr/local/bin/
          
          # Lint chart
          helm lint ${{ env.HELM_CHART_PATH }}
          
          # Template chart
          helm template ${{ env.HELM_RELEASE_NAME }} ${{ env.HELM_CHART_PATH }} --namespace ${{ env.HELM_NAMESPACE }} > /tmp/manifests.yaml
          
          # Validate manifests
          kubectl apply --dry-run=client -f /tmp/manifests.yaml

  build:
    name: Build and Push
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        run: |
          # Build with version tag
          docker build -t ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ env.WORDPRESS_VERSION }}-${{ env.PHP_VERSION }} containers/
          
          # Tag as latest
          docker tag ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ env.WORDPRESS_VERSION }}-${{ env.PHP_VERSION }} ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest
          
          # Push images
          docker push ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ env.WORDPRESS_VERSION }}-${{ env.PHP_VERSION }}
          docker push ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest

      - name: Package Helm chart
        run: |
          # Install Helm
          curl https://get.helm.sh/helm-v3.12.0-linux-amd64.tar.gz | tar xz
          sudo mv linux-amd64/helm /usr/local/bin/
          
          # Package chart
          helm package ${{ env.HELM_CHART_PATH }}
          
          # Create release assets
          mkdir -p dist
          mv *.tgz dist/

      - name: Upload chart artifacts
        uses: actions/upload-artifact@v4
        with:
          name: helm-charts
          path: dist/*.tgz

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBECONFIG_STAGING }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Install Helm
        run: |
          curl https://get.helm.sh/helm-v3.12.0-linux-amd64.tar.gz | tar xz
          sudo mv linux-amd64/helm /usr/local/bin/

      - name: Deploy to staging
        run: |
          # Create namespace
          kubectl create namespace ${{ env.HELM_NAMESPACE }}-staging --dry-run=client -o yaml | kubectl apply -f -
          
          # Install/upgrade chart
          helm upgrade --install ${{ env.HELM_RELEASE_NAME }}-staging ${{ env.HELM_CHART_PATH }} \
            --namespace ${{ env.HELM_NAMESPACE }}-staging \
            --create-namespace \
            --wait \
            --timeout 10m \
            --set wordpress.image.repository=${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }} \
            --set wordpress.image.tag=latest

      - name: Verify deployment
        run: |
          kubectl get pods -n ${{ env.HELM_NAMESPACE }}-staging
          kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=wordpress -n ${{ env.HELM_NAMESPACE }}-staging --timeout=300s

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, deploy-staging]
    if: github.event_name == 'release' && github.event.action == 'published'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBECONFIG_PRODUCTION }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Install Helm
        run: |
          curl https://get.helm.sh/helm-v3.12.0-linux-amd64.tar.gz | tar xz
          sudo mv linux-amd64/helm /usr/local/bin/

      - name: Deploy to production
        run: |
          # Create namespace
          kubectl create namespace ${{ env.HELM_NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -
          
          # Install/upgrade chart
          helm upgrade --install ${{ env.HELM_RELEASE_NAME }} ${{ env.HELM_CHART_PATH }} \
            --namespace ${{ env.HELM_NAMESPACE }} \
            --create-namespace \
            --wait \
            --timeout 10m \
            --set wordpress.image.repository=${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }} \
            --set wordpress.image.tag=${{ env.WORDPRESS_VERSION }}-${{ env.PHP_VERSION }}

      - name: Verify deployment
        run: |
          kubectl get pods -n ${{ env.HELM_NAMESPACE }}
          kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=wordpress -n ${{ env.HELM_NAMESPACE }} --timeout=300s

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ env.WORDPRESS_VERSION }}-${{ env.PHP_VERSION }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  update-helm-repo:
    name: Update Helm Repository
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download chart artifacts
        uses: actions/download-artifact@v4
        with:
          name: helm-charts

      - name: Set up Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Update Helm repository
        run: |
          # Clone gh-pages branch
          git clone --branch gh-pages https://github.com/${{ github.repository }}.git gh-pages
          
          # Copy chart packages
          cp *.tgz gh-pages/
          
          # Update index
          cd gh-pages
          helm repo index . --url https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}
          
          # Commit and push
          git add .
          git commit -m "Update Helm repository for release ${{ github.event.release.tag_name }}"
          git push 